@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="form-group">
    <label>Inventories</label>
    <SelectInventoryComponent OnSelectInventory="OnSelectInventoryAsync" />
</div>

@if (ProductInventories.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var productInventory in ProductInventories)
            {
                <tr>
                    <td>
                        @productInventory.Inventory.InventoryName
                    </td>
                    <td>
                        <InputNumber min="1" @bind-Value="productInventory.InventoryQuantity" class="form-control" />
                    </td>
                    <td>
                        <button class="btn btn-danger" type="button" @onclick="() => RemoveInventoryAsync(productInventory)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public IEnumerable<ProductInventory> ProductInventories { get; set; }

    [Parameter]
    public EventCallback<Inventory> OnAddProductInventory { get; set; }

    [Parameter]
    public EventCallback<ProductInventory> OnRemoveProductInventory { get; set; }

    private async Task OnSelectInventoryAsync(Inventory inventory)
    {
        if (ProductInventories.All(listInventory => listInventory
                                                    .Inventory
                                                    .InventoryName
                                                    .Equals(inventory.InventoryName, StringComparison.CurrentCultureIgnoreCase) == false))
        {
            await this.OnAddProductInventory.InvokeAsync(inventory);
        }
    }

    private async Task RemoveInventoryAsync(ProductInventory productInventory)
    {
        await OnRemoveProductInventory.InvokeAsync(productInventory);
    }
}
