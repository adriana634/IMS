@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase

<div class="form-group">
    <label>Inventories</label>
    <SelectInventoryComponent 
        Inventories="inventories"  
        OnSearchInventory="OnSearchInventory" 
        OnSelectInventory="OnSelectInventory">
    </SelectInventoryComponent>
</div>

@if (ProductInventories != null && ProductInventories.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(ProductInventory productInventory in ProductInventories)
            {
                <tr>
                    <td>
                        @productInventory.Inventory.InventoryName
                    </td>
                    <td>
                        <input type="number" min="0" max="@productInventory.Inventory.Quantity" @bind-value="productInventory.InventoryQuantity"/>
                    </td>
                    <td>
                        <button class="btn btn-link" type="button" @onclick="() => RemoveInventory(productInventory)">Remove</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public IReadOnlyList<ProductInventory>? ProductInventories { get; set; }

    [Parameter]
    public EventCallback<ProductInventory> OnAddProductInventory { get; set; }

    [Parameter]
    public EventCallback<ProductInventory> OnRemoveProductInventory { get; set; }

    private List<Inventory>? inventories;

    private async Task OnSearchInventory(string searchParameter)
    {
        List<Inventory>? inventories = (await ViewInventoriesByNameUseCase
            .ExecuteAsync(searchParameter))?.ToList();
        this.inventories = inventories;
    }

    private void OnSelectInventory(Inventory inventory)
    {
        if (this.ProductInventories != null)
        {
            if (this.ProductInventories.All((listInventory) => !listInventory.Inventory.InventoryName.Equals(inventory.InventoryName, StringComparison.CurrentCultureIgnoreCase)))
            {
                ProductInventory productInventory = new ProductInventory
                {
                    InventoryId = inventory.InventoryId,
                    Inventory = inventory
                };

                this.OnAddProductInventory.InvokeAsync(productInventory);
            }
        }
    }

    private void RemoveInventory(ProductInventory productInventory)
    {
        this.OnRemoveProductInventory.InvokeAsync(productInventory);
    }
}
