<EditForm Model="Product" OnValidSubmit="ValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Product name</label>
        <InputText id="name" @bind-Value="Product.ProductName" class="form-control" />
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="Product.Quantity" class="form-control" />
    </div>

    <div class="form-group">
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="Product.Price" class="form-control" />
    </div>

    <ProductInventoriesComponent 
        ProductInventories="Product.ProductInventories"
        OnAddProductInventory="OnAddProductInventory"
        OnRemoveProductInventory="OnRemoveProductInventory">
    </ProductInventoriesComponent>

    <br/>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>  

@code {
    [Parameter]
    public Product Product { get; set; }

    [Parameter]
    public EventCallback<Product> OnValidSubmitAsync { get; set; }

    private void OnAddProductInventory(Inventory inventory)
    {
        ProductInventory productInventory = new ProductInventory
        {
            ProductId = Product.ProductId,
            Product = Product,
            InventoryId = inventory.InventoryId,
            Inventory = inventory
        };

        Product.ProductInventories.Add(productInventory);
    }

    private void OnRemoveProductInventory(ProductInventory productInventory)
    {
        Product.ProductInventories.Remove(productInventory);
    }

    private async Task ValidSubmitAsync()
    {
        await OnValidSubmitAsync.InvokeAsync(Product);
    }
}
