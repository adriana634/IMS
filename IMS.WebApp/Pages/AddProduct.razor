@page "/addproduct"

@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager

<h3>Add Product</h3>
<br/>
@if (product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmitAsync">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

        <div class="form-group">
            <label for="name">Product name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>

        <ProductInventoriesComponent 
            ProductInventories="productInventories"
            OnAddProductInventory="OnAddProductInventory"
            OnRemoveProductInventory="OnRemoveProductInventory">
        </ProductInventoriesComponent>

        <br/>
        <button type="submit" class="btn btn-primary">Save</button>

    </EditForm>
}

@code {
    private Product? product;
    private List<ProductInventory> productInventories = new List<ProductInventory>();

    protected override void OnInitialized()
    {
        this.product = new Product();

        this.productInventories.ForEach(productInventory => productInventory.ProductId = this.product.ProductId);
        this.product.ProductInventories = this.productInventories;
    }

    private void OnAddProductInventory(ProductInventory productInventory)
    {
        this.productInventories.Add(productInventory);
    }

    private void OnRemoveProductInventory(ProductInventory productInventory)
    {
        this.productInventories.Remove(productInventory);
    }

    private async Task OnValidSubmitAsync()
    {
        if (this.product != null)
        {
            await AddProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/products");
        }
    }
}
