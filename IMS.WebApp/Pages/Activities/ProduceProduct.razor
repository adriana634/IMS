@page "/produce"
@using IMS.WebApp.ViewModels

@inject IProduceProductUseCase ProduceProductUseCase

<ErrorMessageComponent ErrorMessage="@errorMessage" />
<h3>Produce Product</h3>
<br />

<EditForm Model="produceViewModel" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="purchaseOrder">Production Number</label>
        <InputText id="purchaseOrder" @bind-Value="produceViewModel.ProductionNumber" class="form-control" />
    </div>

    <div class="form-group">
        <label>Product to Produce</label>
        <SelectProductComponent OnSelectProduct="OnSelectProduct" />
        <InputText id="product" class="form-control" @bind-Value="produceViewModel.ProductName" disabled="disabled" />
        <input type="hidden" value="@selectedProduct?.ProductId">
        @if (selectedProduct != null)
        {
            <text>Price: </text>
            @selectedProduct.Price.ToString("c")
        }
    </div>

    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="produceViewModel.QuantityToProduce" class="form-control" />
    </div>

    <br/>
    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>

@code {
    private ProduceViewModel produceViewModel = new ProduceViewModel();
    private Product? selectedProduct;
    private string? errorMessage;

    private async Task OnValidSubmit()
    {
        if (selectedProduct!.ValidateEnoughInventoriesForProducing(produceViewModel.QuantityToProduce) == false) 
        {
            errorMessage = $"The inventories are not enough for producing { selectedProduct.ProductName } X { produceViewModel.QuantityToProduce } times";
            return;
        }

        await ProduceProductUseCase.ExecuteAsync(
            produceViewModel.ProductionNumber,
            selectedProduct!,
            produceViewModel.QuantityToProduce,
            "John Doe"
        );

        produceViewModel = new ProduceViewModel();
        selectedProduct = null;
        errorMessage = null;
    }

    private void OnSelectProduct(Product product)
    {
        selectedProduct = product;
        produceViewModel.ProductId = product.ProductId;
        produceViewModel.ProductName = product.ProductName;
    }
}
